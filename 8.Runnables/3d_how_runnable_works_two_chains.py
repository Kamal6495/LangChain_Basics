# --------------------------
# Step 1: Define Runnable Abstract Base Class
# --------------------------

from abc import ABC, abstractmethod
import random


class Runnable(ABC):
    """Abstract base class for all components.

    Enforces that every subclass implements the `invoke` method.
    This ensures a standardized interface so that different components
    can be composed together in chains or pipelines.
    """

    @abstractmethod
    def invoke(self, input_data):
        """Process the given input and return an output.

        Args:
            input_data: Input data to be processed (type depends on subclass).

        Returns:
            Any output generated by the component.
        """
        pass


# --------------------------
# Component 1: Dummy LLM
# --------------------------

class NakliLLM(Runnable):
    """A dummy Language Model simulator.

    This class mimics the behavior of an LLM by randomly selecting a response
    from a predefined list.
    """

    def __init__(self):
        print('LLM Created')

    def invoke(self, prompt):
        """Simulate model inference.

        Args:
            prompt (str): The input prompt string.

        Returns:
            dict: A dictionary with key 'response' containing model output.
        """
        response_list = [
            'Lucknow Capital of UP',
            'T20 World Cup 2024 India',
            'Physics Based Neural Network'
        ]
        return {'response': random.choice(response_list)}

# --------------------------
# Component 2: Dummy Prompt Template
# --------------------------

class NakliPromptTemplate(Runnable):
    """A simple prompt templating class.

    Takes a string template with placeholders and fills it using input variables.
    """

    def __init__(self, template, input_variables):
        """
        Args:
            template (str): Template string with placeholders (e.g. "Hello {name}")
            input_variables (list[str]): List of variables expected in the template.
        """
        self.template = template
        self.input_variables = input_variables

    def invoke(self, input_dict):
        """Format the template with actual values.

        Args:
            input_dict (dict): Dictionary mapping placeholders to values.

        Returns:
            str: The formatted string.
        """
        return self.template.format(**input_dict)


# --------------------------
# Component 3: Output Parser
# --------------------------

class NakliOutputParser(Runnable):
    """Parser to extract response value from a dictionary."""

    def __init__(self):
        pass

    def invoke(self, input_data):
        """Extract only the 'response' field from input data.

        Args:
            input_data (dict): Dictionary containing a 'response' key.

        Returns:
            str: Extracted response text.
        """
        return input_data['response']


# --------------------------
# Component 5: Generalized Runnable Connector
# --------------------------

class RunnableConnector(Runnable):
    """A generalized pipeline that connects multiple runnables.

    It sequentially passes output of one component as input to the next.
    """

    def __init__(self, runnable_list):
        """
        Args:
            runnable_list (list[Runnable]): List of components to chain together.
        """
        self.runnable_list = runnable_list

    def invoke(self, input_data):
        """Execute the pipeline.

        Args:
            input_data: Initial input for the first component.

        Returns:
            Final output after passing through all runnables.
        """
        for runnable in self.runnable_list:
            input_data = runnable.invoke(input_data)
        return input_data


# --------------------------
# Example Usage == Coonecting Two Chains
# --------------------------

# Joke Generator Template
template1 = NakliPromptTemplate(
    template="Write a Joke 1Line on {topic}",
    input_variables=['topic']
)

# Joke Explanation Template
template2 = NakliPromptTemplate(
    template="Write a short note on following Joke {response}",
    input_variables=['response']
)

llm = NakliLLM()
parser = NakliOutputParser()

# Chain 1: Joke Generation (Prompt → LLM)
chain1 = RunnableConnector([template1, llm])
result1 = chain1.invoke({'topic': 'Peacock'})
print(result1)

# Chain 2: Joke Explanation (Prompt → LLM → Parser)
chain2 = RunnableConnector([template2, llm, parser])
result2 = chain2.invoke(result1)  # manually connecting output of chain1
print(result2)

# Combined chain: [Joke Generator → Joke Explainer]
final_chain = RunnableConnector([chain1, chain2])
result3 = final_chain.invoke({'topic': 'Peacock'})
print(result3)

